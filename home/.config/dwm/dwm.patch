diff --git a/config.def.h b/config.def.h
index 1a44983..abeee93 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,7 +5,7 @@
 static const unsigned int borderpx       = 0;   /* border pixel of windows */
 static const int corner_radius           = 10;
 #else
-static const unsigned int borderpx       = 1;   /* border pixel of windows */
+static const unsigned int borderpx       = 5;   /* border pixel of windows */
 #endif // ROUNDED_CORNERS_PATCH
 #if BAR_BORDER_PATCH
 /* This allows the bar border size to be explicitly set separately from borderpx.
@@ -24,10 +24,10 @@ static const int scalepreview            = 4;        /* Tag preview scaling */
 static int nomodbuttons                  = 1;   /* allow client mouse button bindings that have no modifier */
 #endif // NO_MOD_BUTTONS_PATCH
 #if VANITYGAPS_PATCH
-static const unsigned int gappih         = 20;  /* horiz inner gap between windows */
-static const unsigned int gappiv         = 10;  /* vert inner gap between windows */
-static const unsigned int gappoh         = 10;  /* horiz outer gap between windows and screen edge */
-static const unsigned int gappov         = 30;  /* vert outer gap between windows and screen edge */
+static const unsigned int gappih         = 0;  /* horiz inner gap between windows */
+static const unsigned int gappiv         = 0;  /* vert inner gap between windows */
+static const unsigned int gappoh         = 0;  /* horiz outer gap between windows and screen edge */
+static const unsigned int gappov         = 0;  /* vert outer gap between windows and screen edge */
 static const int smartgaps_fact          = 1;   /* gap factor when there is only one client; 0 = no gaps, 3 = 3x outer gaps */
 #endif // VANITYGAPS_PATCH
 #if AUTOSTART_PATCH
@@ -162,7 +162,7 @@ static void (*bartabmonfns[])(Monitor *) = { NULL /* , customlayoutfn */ };
 #if BAR_PANGO_PATCH
 static const char font[]                 = "monospace 10";
 #else
-static const char *fonts[]               = { "monospace:size=10" };
+static const char *fonts[]               = { "monospace:size=12" };
 #endif // BAR_PANGO_PATCH
 static const char dmenufont[]            = "monospace:size=10";
 
@@ -409,10 +409,16 @@ static const char *const autostart[] = {
 #if RENAMED_SCRATCHPADS_PATCH
 static const char *scratchpadcmd[] = {"s", "st", "-n", "spterm", NULL};
 #elif SCRATCHPADS_PATCH
-const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };
+const char *spcmd1[] = {"st", "-n", "spterm1", "-g", "150x40", "-e", "wrap", "lf", NULL };
+const char *spcmd2[] = {"st", "-n", "spterm2", "-g", "150x34", NULL };
+const char *spcmd3[] = {"st", "-n", "spterm3", "-g", "120x34", "-e", "wrap", "sudo bash", NULL };
+const char *spcmd4[] = {"st", "-n", "spterm4", "-g", "100x34", "-e", "wrap", "bluetoothctl", NULL };
 static Sp scratchpads[] = {
    /* name          cmd  */
-   {"spterm",      spcmd1},
+   {"spterm1",      spcmd1},
+   {"spterm2",      spcmd2},
+   {"spterm3",      spcmd3},
+   {"spterm4",      spcmd4},
 };
 #endif // SCRATCHPADS_PATCH
 
@@ -497,12 +503,15 @@ static const Rule rules[] = {
 	RULE(.wintype = WTYPE "UTILITY", .isfloating = 1)
 	RULE(.wintype = WTYPE "TOOLBAR", .isfloating = 1)
 	RULE(.wintype = WTYPE "SPLASH", .isfloating = 1)
-	RULE(.class = "Gimp", .tags = 1 << 4)
-	RULE(.class = "Firefox", .tags = 1 << 7)
+	// RULE(.class = "Gimp", .tags = 1 << 4)
+	// RULE(.class = "Firefox", .tags = 1 << 7)
 	#if RENAMED_SCRATCHPADS_PATCH
 	RULE(.instance = "spterm", .scratchkey = 's', .isfloating = 1)
 	#elif SCRATCHPADS_PATCH
-	RULE(.instance = "spterm", .tags = SPTAG(0), .isfloating = 1)
+	RULE(.instance = "spterm1", .tags = SPTAG(0), .isfloating = 1)
+	RULE(.instance = "spterm2", .tags = SPTAG(1), .isfloating = 1)
+	RULE(.instance = "spterm3", .tags = SPTAG(2), .isfloating = 1)
+	RULE(.instance = "spterm4", .tags = SPTAG(3), .isfloating = 1)
 	#endif // SCRATCHPADS_PATCH
 };
 
@@ -769,7 +778,7 @@ static const char *xkb_layouts[]  = {
 #endif // XKB_PATCH
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #if COMBO_PATCH && SWAPTAGS_PATCH && TAGOTHERMONITOR_PATCH
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      comboview,      {.ui = 1 << TAG} }, \
@@ -836,11 +845,12 @@ static const char *xkb_layouts[]  = {
 #define STACKKEYS(MOD,ACTION) \
 	{ MOD, XK_j,     ACTION##stack, {.i = INC(+1) } }, \
 	{ MOD, XK_k,     ACTION##stack, {.i = INC(-1) } }, \
-	{ MOD, XK_s,     ACTION##stack, {.i = PREVSEL } }, \
-	{ MOD, XK_w,     ACTION##stack, {.i = 0 } }, \
-	{ MOD, XK_e,     ACTION##stack, {.i = 1 } }, \
-	{ MOD, XK_a,     ACTION##stack, {.i = 2 } }, \
-	{ MOD, XK_z,     ACTION##stack, {.i = -1 } },
+	{ MOD, XK_a,     ACTION##stack, {.i = 0 } }, \
+	// { MOD, XK_s,     ACTION##stack, {.i = PREVSEL } }, \
+	// { MOD, XK_w,     ACTION##stack, {.i = 0 } }, \
+	// { MOD, XK_e,     ACTION##stack, {.i = 1 } }, \
+	// { MOD, XK_a,     ACTION##stack, {.i = 2 } }, \
+	// { MOD, XK_z,     ACTION##stack, {.i = -1 } },
 #endif // STACKER_PATCH
 
 #if BAR_HOLDBAR_PATCH
@@ -895,7 +905,7 @@ static const Key on_empty_keys[] = {
 };
 #endif // ON_EMPTY_KEYS_PATCH
 
-static const Key keys[] = {
+static const Key _unused_keys[] = {
 	/* modifier                     key            function                argument */
 	#if KEYMODES_PATCH
 	{ MODKEY,                       XK_Escape,     setkeymode,             {.ui = COMMANDMODE} },
@@ -1303,6 +1313,37 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_9,                                  8)
 };
 
+static const Key keys[] = { // KEYMAPS
+	STACKKEYS(MODKEY,                              focus)
+	STACKKEYS(MODKEY|ShiftMask,                    push)
+	TAGKEYS(                        XK_1,                                  0)
+	TAGKEYS(                        XK_2,                                  1)
+	TAGKEYS(                        XK_3,                                  2)
+	TAGKEYS(                        XK_4,                                  3)
+	TAGKEYS(                        XK_5,                                  4)
+	TAGKEYS(                        XK_6,                                  5)
+	TAGKEYS(                        XK_7,                                  6)
+	TAGKEYS(                        XK_8,                                  7)
+	TAGKEYS(                        XK_9,                                  8)
+	{ MODKEY,                       XK_m,          incnmaster,             {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_m,          incnmaster,             {.i = -1 } },
+	{ MODKEY,                       XK_h,          setmfact,               {.f = -0.03} },
+	{ MODKEY,                       XK_l,          setmfact,               {.f = +0.03} },
+	{ MODKEY,                       XK_space,      zoom,                   {0} },
+	{ MODKEY,                       XK_q,          killclient,             {0} },
+	{ MODKEY|ShiftMask,             XK_q,          killunsel,              {0} },
+	{ MODKEY,                       XK_e,          setlayout,              {.v = &layouts[0]} },
+	{ MODKEY|ShiftMask,             XK_e,          setlayout,              {.v = &layouts[3]} },
+	{ MODKEY|ShiftMask,             XK_space,      togglefloating,         {0} },
+	{ MODKEY,                       XK_f,          togglefullscreen,       {0} },
+	{ MODKEY|ShiftMask,             XK_n,          togglebar,              {0} },
+	{ MODKEY,                       XK_r,          togglescratch,          {.ui = 0 } },
+	{ MODKEY,                       XK_s,          togglescratch,          {.ui = 1 } },
+	{ MODKEY,                       XK_d,          togglescratch,          {.ui = 2 } },
+	{ MODKEY,                       XK_b,          togglescratch,          {.ui = 3 } },
+	{ MODKEY,                       XK_0,          view,                   {.ui = ~SPTAGMASK } },
+};
+
 #if KEYMODES_PATCH
 static const Key cmdkeys[] = {
 	/* modifier                    keys                     function         argument */
@@ -1593,6 +1634,7 @@ static const Signal signals[] = {
 static Signal signals[] = {
 	/* signum       function        argument  */
 	{ 1,            setlayout,      {.v = 0} },
+	{ 2,            xrdb,      {.v = NULL} },
 };
 #endif // DWMC_PATCH
 
